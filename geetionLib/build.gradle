apply from: rootProject.file('cc.gradle')

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"


        // buildConfigField 'boolean', 'LOG_DEBUG', rootProject.ext.android["DEBUG"]
        // buildConfigField 'String', 'TAG', rootProject.ext.android["TAG"]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    // Support库
    api rootProject.ext.supportLibs
    // auto layout
    implementation 'com.zhy:autolayout:1.4.5'
    // 网络请求库
    api rootProject.ext.retrofitLibs
    // RxJava2
    api rootProject.ext.rxJavaLibs
    // dagger2
    api rootProject.ext.dagger.dagger2
    annotationProcessor rootProject.ext.dagger.dagger2Compiler
    // glide
    api rootProject.ext.glide.glide
    api(rootProject.ext.glide.glideOkhttp) {
        exclude group: 'glide-parent'
    }
    annotationProcessor rootProject.ext.glide.glideCompiler
    // butter knife
    // implementation rootProject.ext.butterknife.butterknife
    // annotationProcessor rootProject.ext.butterknife.butterknifeCompiler
    //logger
    api rootProject.ext.loggerLibs
    // util
    api rootProject.ext.utilLibs
    // leakCanary
    // debugImplementation rootProject.ext.leakCanary.canaryDebug
    // releaseImplementation rootProject.ext.leakCanary.canaryRelease
    implementation project(':baseMVP')
}
