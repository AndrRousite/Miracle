apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        buildConfigField 'boolean', 'LOG_DEBUG', rootProject.ext.android["DEBUG"]
        buildConfigField 'String', 'LOG_TAG', rootProject.ext.android["LOG_TAG"]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    //support
    compile(rootProject.ext.dependencies["support-v4"]) {
        exclude module: 'support-annotations'
    }
    compile(rootProject.ext.dependencies["appcompat-v7"]) {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    compile(rootProject.ext.dependencies["recyclerview-v7"]) {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    compile(rootProject.ext.dependencies["design"]) {
        exclude module: 'support-annotations'
    }
    compile rootProject.ext.dependencies["annotations"]
    compile rootProject.ext.dependencies["butterknife"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["gson"]
    compile rootProject.ext.dependencies["androideventbus"]
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["retrofit-converter-gson"]
    compile rootProject.ext.dependencies["retrofit-adapter-rxjava"]
    compile rootProject.ext.dependencies["okhttp3"]
    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["rxlifecycle"]
    compile rootProject.ext.dependencies["rxlifecycle-android"]
    compile rootProject.ext.dependencies["rxlifecycle-components"]
    compile rootProject.ext.dependencies["rxpermissions"]
    compile(rootProject.ext.dependencies['rxerrorhandler2']) {
        exclude module: 'rxjava'
    }
    compile(rootProject.ext.dependencies["rxcache2"]) {
        exclude module: 'rxjava'
        exclude module: 'dagger'
    }
    compile(rootProject.ext.dependencies["rxcache-jolyglot-gson"]) {
        exclude module: 'gson'
    }
    provided rootProject.ext.dependencies["javax.annotation"]
    compile rootProject.ext.dependencies["dagger2"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    //view
    compile(rootProject.ext.dependencies["autolayout"]) {
        exclude group: 'com.android.support'
    }
    compile(project(':uikit')) {
        exclude group: 'com.android.support'
    }
    compile(project(':updatelib')) {
        exclude group: 'com.android.support'
    }
    compile(project(':agentweb')) {
        exclude group: 'com.android.support'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xbootclasspath/a:" + System.properties.get("java.home") + "/lib/rt.jar"
    }
}

buildscript {
    repositories {
        jcenter()
    }
}

/** 以下开始是将Android Library上传到jcenter的相关配置**/
//apply plugin: 'com.novoda.bintray-release'//添加
//publish{
//    repoName = 'Android'//远程仓库名字,不指明，默认是上传到maven
//    userOrg = 'letion'//用户名
//    groupId = 'com.letion'//jcenter上的路径
//    artifactId = 'Miracle'//项目名称
//    publishVersion = '1.0.0'//版本号
//    desc = '基于mvp的android项目框架'//描述，不重要
//    website = ''//项目主页
//}
//tasks.withType(Javadoc) {//防止编码问题
//    options.addStringOption('Xdoclint:none', '-quiet')
//    options.addStringOption('encoding', 'UTF-8')
//    options.addStringOption('charSet', 'UTF-8')
//}
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
version = "0.1.1" // 修改为你的版本号
group = "com.letion.miracle" // Maven Group ID for the artifact，一般填你唯一的包名
def siteUrl = 'https://github.com/AndrRousite/Miracle'      // 项目的主页
def gitUrl = 'https://github.com/AndrRousite/Miracle.git'   // Git仓库的url
install {
    repositories.mavenInstaller {
// This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
// Add your description here
                name 'base on mvp an android library.' //项目描述
                url siteUrl
// Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'liu-feng' //填写的一些基本信息
                        name 'liu-feng'
                        email 'w710989327@foxmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "miracle" //发布到JCenter上的项目名字
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}